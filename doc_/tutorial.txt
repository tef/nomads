                  ------------------------------------

                               A Tutorial

                                 of the

                     Logical State Threads package

                          for SICStus Prolog

                  ------------------------------------
                            Andreas Kagedal
                  ------------------------------------

                              Version 0.1


----------------------------------------------------------------------
Copyright (C) 1996  Andreas Kagedal

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
----------------------------------------------------------------------

% Comments in the text, such a this one, are meta comments that
% discusses the contents and form of the document.  They should be
% removed in the final version.

% This ASCII version of the Tutorial should eventually be converted into
% TeXInfo format. 

% This text should give a tutorial introduction to the concepts of
% Logical State Threads.  It is currently very incomplete. Lots of
% things remain to be discussed.


The Logical State Threads package is a powerful tool to simplify the
development of large programs.  It makes a source-to-source
transformation of your program adding new arguments to your predicates
according to your specifications.

% blah, blah blah... (More advertising)


=========================================================================
A First Example
=========================================================================

Suppose you want to write a program that traverses a binary tree which
has integers in the leaves and names of animals in the internal nodes.
The basic ``skeleton'' of the traversing predicate would look something
like:

   traverse_tree( Tree ) :-
	traverse( Tree ).

   traverse( leaf(Int) ).
   traverse( tree(Animal,LeftBranch,RightBranch) ) :-
	traverse( LeftBranch ),
	traverse( RightBranch ).

This program still does not really do anything. If we for instance want
to calculate the sum of all the leaves we can add two more arguments to
the traverse predicate.  We *thread* the value calculated so far through
the predicate:

   traverse_tree( Tree, LeafSum) :-
	traverse( Tree, 0, LeafSum ).

   traverse( leaf(Int), OldSum, NewSum) :-
	NewSum is OldSum + Int.
   traverse( tree(Animal,LeftBranch,RightBranch), OldSum, NewSum ) :-
	traverse( LeftBranch, OldSum, TmpSum ),
	traverse( RightBranch, TmpSum, NewSum ).

This is a very common way of dealing with *state* in a Prolog
program. The threaded sum arguments models the current state of the
calculated sum of the leaves.  If you have written larger applications
in Prolog you have probably used this technique many times. There is one
obvious disadvantage with this approach. It easily makes predicates have
lots of arguments. This makes them difficult to read, especially as most
arguments are not really used in most clauses except that they are
threaded through the body. Try for instance to imagine what this program
would look like if there were two kinds of internal nodes, one with
names of animals and one with colours, and we wanted to compute not only
the sum of the leaves but also the maximal leaf, the number of
occurrences of the colour `blue' and a list of all animals in the tree.


        This is the problem that the Logical State Threads
                   package helps you avoid!


Instead of adding all those threaded state variables you just
declare what predicates should have what state thread and then the
packaged adds threaded variables for you.  Lets go back to the original
example where we just wanted to calculate the sum of the leaves.  We
begin by adding to the top of the file containing the program:

   :- ensure_loaded( library(threads) ).

% It is currently also possible to use use_module/1 instead of
% ensure_loaded/1. 

This will enable us to use the Logical State Threads package in our
program.  We then can define a new *thread*:

   :- thread( leaf_sum, method(X, Old, New, New is Old + X), 0 ).

The name of the new thread is `leaf_sum'.  The second argument of the
declaration provides a *method* for how the the value of this thread can
be manipulated.  The method for `leaf_sum' says that given an integer X
and the old value Old of the thread, the new value New of the thread is
calculated using the goal `New is Old + X'.  The kind of method we give
here is called a *anonymous method*, there is also a *named method* as
we shall see below.  The third argument of the declaration says that the
initial value of the thread should be `0' (zero).  We then have to say
that the predicate traverse/1 should use this thread:

   :- thread_pred( traverse/1, [leaf_sum] ).

% It should be possible to write
% 
%  :- thread_pred( traverse/1, leaf_sum ).
%
% when there is only one thread for traverse/1.

We are now ready for the program:

   traverse_tree( Tree, LeafSum ) :--
	traverse( Tree ) with sum_leaf(LeafSum).

   traverse( leaf(Int) ) :--
	leaf_sum::[Int].
   traverse( tree(Animal,LeftBranch,RightBranch) ) :--
	traverse( LeftBranch ),
	traverse( RightBranch ).

This program will be expanded to exactly the program we wrote before. If
we study it we see that it looks very much like our initial
``skeleton'' predicate. There are, however, a few differences: 

  -  Clauses which you want to be expanded with threads should use the
     `:--' implication instead of the ordinary `:-'.

  -  We have added the call `leaf_sum::[Int]' to the first clause of
     traverse/1.  This is the way to use the method of the thread to
     manipulate its value. The syntax is <thread>::[Arg,...].  If you
     give several values to the thread they are processed left to
     right. For instance `leaf_sum::[1,2,3]' has the same meaning as
     `(leaf_sum::[1],leaf_sum::[2],leaf_sum::[3])'.  The first clause of
     traverse/1 will now be expanded to:

	 traverse( leaf(Int), OldSum, NewSum) :-
	      NewSum is OldSum + Int.

  -  We use the operator `with' to initialize the thread in the clause
     for traverse_tree/2. `traverse( Tree ) with sum_leaf(LeafSum)' says
     that when calling traverse/1 initialize the value of the thread
     with the default we specified when we declared `leaf_sum' to be a
     thread, i.e. `0', and unify the final value of the thread with
     `LeafSum'. Sometimes you will not need the final value. Then you
     can just skip it and write: `traverse( Tree ) with sum_leaf', and
     sometimes you will want to override the default initial value:
     `traverse( Tree ) with sum_leaf(InitialVal,LeafSum)'.


Suppose now that we also want to collect all animals of the tree in a
list.  This is simple to do.  We add a thread `animals':

   :- thread( animals, add_to_list, [] ).

Here we specified the method to use as `add_to_list'. This is a *named
method* which we have to specify with a *method declaration*:

   :- thread_method( add_to_list(X), Old, New, New = [X|Old] ).

This says that a new value New of a thread is produced by the method
add_to_list given its the argument X and the old value Old of the thread
using the call `New = [X|Old]'.

% Note: --------
If we wanted to we could have instead used the approach of `leaf_sum' and
given the method directly in the thread declaration:

   :- thread( animals, method(X,Old,New,New = [X|Old]), [] ).

There are, however, some advantages of named methods. You can for
instance have methods with more arguments than one, or no argument at
all, as we shall see below.  Having named methods also enable us to
specify several methods for the same thread and the same method for
several threads.
% End note -------

We must also add `animals' to the list of threads that should be
expanded for traverse/1:

   :- thread_pred( traverse/1, [leaf_sum,animals] ).

We then modify the second clause of traverse/1 adding a new call:

   traverse( tree(Animal,LeftBranch,RightBranch) ) :--
        animals::add_to_list(Animal),
	traverse( LeftBranch ),
	traverse( RightBranch ).

The added call `animals::add_to_list(Animal)' is thus the way we use the
named method `add_to_list' to modify the thread `animals'.
% Note: --------
In this case, when `add_to_list' is the first specified method for
`animals' (it is the only one) and it uses exactly one argument, it is
the *default method* (of `animals') and the previous notation can in fact
be used: `animals::[Animal]'.
% End note -------

This clause will be expanded to something like:

   traverse( tree(Animal,LeftBranch,RightBranch),... AnIn,AnOut,... ) :-
        AnTmp1 = [Animal|AnIn],
	traverse( LeftBranch, ...AnTmp1,AnTmp2,...),
	traverse( RightBranch ...AnTmp2,AnOut,...).

where the ellipsis (`...') represent other arguments corresponding to
expanded threads. In our case this would just mean the arguments for
`sum_leaf'.

Finally, we must initialize `animals' at the call from `traverse_tree':

   traverse_tree( Tree, LeafSum, Animals ) :--
	traverse( Tree ) with ( leaf_sum(LeafSum),
                                animals(Animals)
                              ).

And we are done!  The new complete program looks like this:

   % A program that traverses a tree and produces the sum of all the
   % leaves, and a list of all animals occurring in internal nodes.

   :- thread_method( add_to_list(X), Old, New, New = [X|Old] ).

   :- thread( leaf_sum, method(X, Old, New, New is Old + X), 0 ).
   :- thread( animals, add_to_list, [] ).

   :- thread_pred( traverse/1, [leaf_sum,animals] ).


   traverse_tree( Tree, LeafSum, Animals ) :--
	traverse( Tree ) with ( leaf_sum(LeafSum),
                                animals(Animals)
                              ).

   traverse( leaf(Int) ) :--
	leaf_sum::[Int].
   traverse( tree(Animal,LeftBranch,RightBranch) ) :--
        animals::add_to_list(Animal),
	traverse( LeftBranch ),
	traverse( RightBranch ).


Notice how little the clauses of the program changed!  No new arguments
only one initialization in traverse_tree/3 and a method application in
the second clause of traverse/1.

Next, we illustrate how we can define a thread where we don't know the
initial value when we declare it.  This is done by just omitting the last
argument of the declaration.  For example, when we want to define a
thread keeping track of the maximal leaf found so far we can declare it
like this:

   :- thread( max_leaf, method(X,Old,New,New is max(Old,X)) ).

But, if we want to thread it through the tree traversal program we need
to explicitly provide also the initial value when it is initialized.
This achieved by using the 'thread(Initial,Final)' form of the
initialization term.  We let the initial value be -100000:

   traverse_tree( Tree, LeafSum, Animals ) :--
	traverse( Tree ) with ( leaf_sum(LeafSum),
                                max_leaf(-100000,MaxLeaf),
                                animals(Animals),
                              ).


Without more explanations we now show the program that we earlier
suggested was quite difficult to write in a readable way using plain
Prolog. Assuming there is an additional kind of internal node in the
tree we are traversing:

    tree2(Colour,LeftBranch,RightBranch) 

our new program should compute the sum of the leaves, the maximal leaf,
the number of occurrences of the colour `blue' and a list of all animals
in the tree:


   :- thread_method( inc, Old, New, New is Old + 1 ).
   :- thread_method( add_to_list(X), Old, New, New = [X|Old] ).

   :- thread( leaf_sum, method(X,Old,New,New is Old+X), 0 ).
   :- thread( max_leaf, method(X,Old,New,New is max(Old,X)) ).
   :- thread( blue, inc, 0 ).
   :- thread( animals, add_to_list, [] ).

   :- thread_pred( traverse/1, [leaf_sum,max_leaf,blue,animals] ).


   traverse_tree( Tree, LeafSum, MaxLeaf, Blue, Animals ) :--
	traverse( Tree ) with ( leaf_sum(LeafSum),
                                max_leaf(-100000,MaxLeaf),
                                blue(Blue),
                                animals(Animals)
                              ).

   traverse( leaf(Int) ) :--
	leaf_sum::[Int],
        max_leaf::[Int].
   traverse( tree(Animal,LeftBranch,RightBranch) ) :--
        animals::add_to_list(Animal),
	traverse( LeftBranch ),
	traverse( RightBranch ).
   traverse( tree2(Colour,LeftBranch,RightBranch) ) :--
        (Colour = blue -> blue::inc ; true ),
	traverse( LeftBranch ),
	traverse( RightBranch ).

Observe that the new method `inc' does not take any arguments.


=========================================================================
Backward Threads
=========================================================================

The threads we have seen so far have all been threaded from left to
right in the clauses.  This might not always be what you want.  Consider
for instance the `animals' thread in the previous example.  It collects
animals on a list as they are encountered in the tree.  Given the
following tree:

tree(chimpanzee,
     tree(gibbon,1,2),
     tree(parrot,3,4)
    )

	 chimpanzee
	   /   \
      gibbon   parrot
       /  \     /  \
      1    2   3    4

the program would produce the following list of animals:
[parrot,gibbon,chimpanzee], i.e. in the reverse order they were
encountered during tree traversal.

If you would want them to appear in the non-reversed order you can
redefine the the animals to instead use the following method:

   :- thread_method( add_to_list_rl(X), Old, New, Old = [X|New] ).

This says that given the list of animals encountered in the rest of the
tree (New) the the list of animals before this method application (Old)
should be the list [X|New].  If the thread `animals' is defined using
this method the second clause for traverse/1:

   traverse( tree(Animal,LeftBranch,RightBranch) ) :--
        animals::add_to_list(Animal),
	traverse( LeftBranch ),
	traverse( RightBranch ).

would be expanded to

   traverse( tree(Animal,LeftBranch,RightBranch), ..., AIn, AOut,... ) :--
        AIn = [Animal|A1]),
	traverse( LeftBranch, ..., A1, A2,... ),
	traverse( RightBranch, ..., A2, AOut,... ).

To make this work there is one more thing we need to take care of.  In
the clause of traverse_tree/5, where the `animals' thread is initialized
strange things will happen if we don not make some changes.  The call 

       traverse( Tree ) with ( ...,animals(Animals))

says that the 'animals' should be initialized with the default value
(which is the empty list, `[]') and the result should be unified with
the variable Animals.  The expanded version of this is thus

       traverse( Tree...,[], Animals, ...)

but now when we use the new method `add_to_list_rl' this won't work
since now the "left" argument will be unified with the final value and
the "right" argument should be unified with the initial value. i.e. we
want the following:

       traverse( Tree...,Animals, [], ...)

This can be achieved by using the 'thread(Initial,Final)' form of thread
initialization, but where we swap the initial and final terms:

       traverse( Tree ) with ( ...,animals(Animals,[]))

Now everything works and we get the list [chimpanzee,gibbon,parrot] just
as we wanted.

There is a much simpler way of achieving the same thing as we just did,
and at the same time avoids the conceptual problem of having to regard
the initial value as the final and the final value as the initial.

By making the thread `animals' be a *backward* thread with the
declaration

   :- thread_bwd( animals, add_to_list, [] ).

using the original method we achieve exactly the same thing as above,
and we can keep the original initialization:

       traverse( Tree ) with ( ...,animals(Animals))

where we don't have to mention the initial value.  All the mess of
"reversing" the methods and initializations will be taken care of
automatically.


=========================================================================
The DCG Thread
=========================================================================

The threads package was initially inspired by how Definite Clause
Grammars (DCGs) normally are implemented in Prolog.  One thread
(containing the parsed string) is threaded through the DCG clauses and
accessed/modified using special syntax.  To support DCGs the threads
package provides a predefined thread `dcg' which can be
accessed/modified using standard DCG syntax. 
% Note: --------
If you are unfamiliar with DCGs, take a look in the Prolog Manual!
% End note -------

The declaration for `dcg' would look like this:

:- thread_bwd(dcg, method(Term,Old,New,New=[Term|Old]), []).

If you have a predicate p/k that uses the `dcg' thread you can call it
in the following way to parse the string String:

         p(...) with dcg(String)

Conceptually, `dcg' is a thread that generates a string String from the
grammar implemented by p/k, but if String is bound to a string before
the call, the string is parsed.

To parse a word/character/token you can use the default method notation
described earlier:

         p(...) -->> ..., dcg::['token'],...

or the standard DCG notation, where the name of the thread is omitted:

         p(...) -->> ..., ['token'],...

% I used the `-->>' instead of the `:--' since it makes the clause look
% more like a grammar rule.  There is not semantic difference and I
% could have used `:--' instead.  One idea is to change this so that one
% can only use the DCG notation (omitting the `dcg::' part) if one uses
% the `-->>' clause constructor.


=========================================================================
A Second Example
=========================================================================

We are now ready for a new program example.  It illustrates the use of
the 'dcg' thread, and the fact that you can define several methods for
the same thread.

% This might be a too big example.

The predicate eval/2 parses a tokenized arithmetic expression and returns
the result.  The predicates expression/0, term/0 and factor/0 parses an
initial (sub) expression in the `dcg' thread, evaluate it and push the
result on a stack implemented as a thread.  Observe that there are two
methods for the stack thread, push and pop.  Also observe that we need
not declare the `dcg' thread, but we must declare for expression/0,
term/0 and factor/0 that they use the `dcg' thread.

    :- ensure_loaded( library(threads) ).

    :- thread( stack, [push,pop], [] ).

    :- thread_method( push(X), Old, New, New = [X|Old] ).
    :- thread_method( pop(X),  Old, New, Old = [X|New] ).

    :- thread_pred( expression/0,   [stack,dcg] ).
    :- thread_pred( term/0,         [stack,dcg] ).
    :- thread_pred( factor/0,       [stack,dcg] ).


    eval(Exp,Result) :--
	    ( expression, stack::pop(Result) ) with (dcg(Exp),stack).

    expression -->> term, [+], expression,
	    stack::pop(X), % The expression.
	    stack::pop(Y), % The term.
	    Result is X + Y,
	    stack::push(Result).
    expression -->> term.

    term -->> factor, [*], term,
	    stack::pop(X), % The term.
	    stack::pop(Y), % The factor.
	    Result is X * Y,
	    stack::push(Result).
    term -->> factor.

    factor -->> ['('], expression, [')'].
    factor -->> [X], number(X), stack::push(X).



=========================================================================
More Advanced Initialization
=========================================================================

When a predicate that uses a thread t is called from a clause where this
thread is not "defined", the call must supply an initial value for t
and, perhaps, provide access to the final value of t at success of the
call.  As we have seen above, this is accomplished using a call on the
form '<goal> with <ties>', where <tie> is a sequence of Thread
Initialization Expressions, TIEs.  A TIE can be a simple term describing
how one thread should be initialized, or it can be a more complex
expression describing how the initial values of some threads depends on
other threads. So far we have seen two forms of simple TIEs.

   t(Final)
   t(Initial,Final)

There is one more even simpler, when you are not interested in the final
result:

   t

Here is an example where you can compare how they are expanded:

   :- thread( t1, method(X,Old,New,New=Old), t1_init ).

   :- thread_pred(p_1/0, [t1] ).

   q :-- p_1 with t1.
   q :-- p_1 with t1(A),
         u(A).
   q :-- p_1 with t1(0,A),
         u(A).

The clauses of this program are expanded to:

   q :- p_1(t1_init, _).
   q :- p_1(t1_init, A),
        u(A).
   q :- p_1(0, A),
        u(A).

If you want to initialize a thread t2 with the final result of another
thread t1 and given that the following declarations were added to the
program

   :- thread( t2, method(X,Old,New,New=Old), t2_init ).
   :- thread_pred(p_2/0, [t2] ).

you can use the above TIEs and write

  (p_1, p_2) with (t1(T1Res), t2(T1Res,T2Res))

This goal would expand to:

  p_1(t1_init, T1Res), p_2(T1Res, T2Res)  

There is another way to achieve this same thing:

   (p_1, p_2) with t1 => t2(T2Res)

This avoids the extra variable T1Res (in your program, it emerges in the
expanded program, of course), and makes more explicit what you want to
happen.  If you want to initialize t1 with the same value as t2 is
initialized with, and unify the results of t1 and t2 you can write:

   (p_1, p_2) with t1 := t2

This is expanded to:

   p_1(t2_init, A), p_2(t2_init, A)

This makes t1 get the initial value t2_init declared as default initial
value for t2 (t2 is also initialized with this value). The final values
are also unified.  The following initializes both t1 and t2 with zero and
the final values of both threads are unified with Result:

   (p_1, p_2) with t1 := t2(0,Result)

Expands to

   p_1(0, Result), p_2(0, Result),

This "assignment" might not be very usable used like this, but works
very well with the glob(...) operator below. 

A third way you can make thread combined initializations is using a
"unification" operator `=':

   (p_1, p_2) with t1 = t2

This unifies what ever initial values t1 and t2 gets, and also their
final values are unified.  Thus, the above initialization would fail at
expansion time since t1 and t2 has the non-unifiable default initial
values `t1_init' and `t2_init'.  The following would, however, work:

   (p_1, p_2) with t1(i(x,_),_) = t2(i(_,y),_)

and would be expanded to

   p_1(i(x,y), A), p_2(i(x,y), A).


We now move to a different problem.   Suppose you have a predicate that
takes a thread t1 and you want to use it in a context where it should be
linked into the thread of another thread t2. That is, we have a clause
something like

    p_2 :- p_2, p_1, p_2.

and we want it to be expanded to 

   p_2(A, B) :- p_2(A, C), p_1(C, D), p_2(D, B).

but it will instead generate an error messages stating that t_1 is not
initialized in the call to p_1.   We can achieve the above expansion by
initializing t1 to the value of t2 in the surrounding context using a
'glob()' operator:

   p_2 :-- p_2, p_1 with t1 := glob(t2), p_2)

This expands as we desired.  glob(t2) thus plays the role of a thread
that is initialized with the value of t2 just before the call and whose
final value is the value of t2 just after the call to p_1/0.

A simple TIE such as t(Initial,Final) or t(Final) describes how a thread
is provided with an initial and a final value.  In the same way a
composed TIE can be regarded as having an initial and a final value,
which can be determined from its sub-TIEs:

   <tie1> => <tie2>

      The initial value is the initial value of <tie1>.
      The final   value is the final   value of <tie2>.

   <tie1> := <tie2>

      The initial value is the initial value of <tie2>.
      The final   value is the final   value of <tie2>.
      (These are also the initial and final values of <tie1>.)

   <tie1> = <tie2>

      The initial value is the initial value of <tie1> and <tie2> unified.
      The final   value is the final   value of <tie1> and <tie2> unified.
      (These are also the initial and final values of <tie1> and <tie2>.)

This enable us to nest these composed TIEs in (almost) arbitrarily
ways. Assuming the following added declarations to our program:

   :- thread( t3, method(X,Old,New,New=Old), t3_init ).
   :- thread_pred(p_3/0, [t3] ).

We can do the following:

    q :-- (p_1,p_2,p_3) with t1=>t2=>t3(Result).

    q :-- (p_1,p_2,p_3) with t1:=(t2=>t3).

    p_2 :-- p_2,
            (p_1,p_3) with (t1=>t3):=glob(t2),
            p_2.

These clauses are expanded to:

    q :- p_1(t1_init, A), p_2(A, B), p_3(B, Result).

    q :- p_1(t2_init, A), p_2(t2_init, B), p_3(B, A).

    p_2(A, B) :-
        p_2(A, C),
        p_1(C, E), p_3(E, D),
        p_2(D, B).

Sometimes it might be interesting to know what values a certain TIE is
initialized with.  This can be investigated using an *anonymous* TIE of
the form @(Initial,Final).  This TIE has a initial value Initial, and a
final value Final, but is not associated with any thread.  It can be
used together with `=' to "extract" the initial/final values of other
TIEs:

   q :-- (p_1, p_2) with (t1=>t2) = @(I,F),
         write(I),
         write(F).

expanded to:

   q :- p_1(t1_init, B),
        p_2(B, F),
        write(t1_init),
        write(F).


=========================================================================
Built in methods.
=========================================================================

We have previously seen that the Logical State Threads package provides
a predefined thread `dcg'.  Here we shall see that it also provides a few
built in methods for accessing or changing the value of a thread.

The first method `value' provides a way of getting hold of the present
value of the thread.  It works as if defined by the following
declaration:

    :- thread_method(value(V), Thread, Thread, V=Thread)).

An example of how it can be used looks like this:

    p_2 :-- p_2, t2::value(Value), write(Value), p_2.

Which expands to

    p_2(B, C) :- p_2(B, D), Value=D, write(Value), p_2(D, C).

% The following should probably be said here, in some way:
%
% It might be easy to think that the following expansion should be more
% efficient:
%
%    p_2(B, C) :- p_2(B, D), write(D), p_2(D, C).
%
% This is not true.  The compiler should compile these two clauses to
% the same object code.  The explicit unification in the expanded clause
% makes sure that the argument Value provided in the method application
% and the thread are not unified before the method application appears
% in the unexpanded clause.  This is important in the presence of cuts.
% The clause:
%
%    p_1 :-- get_a_value_from_somewhere(V), !, t1::value(V).
%
% should be expanded to
%
%    p_1(A, A) :- get_a_value_from_somewhere(V), !, V = A.
%
% and not to
%
%    p_1(V, V) :- get_a_value_from_somewhere(V), !.



% Here the tutorial should go on illustrating more features
% such as:
%
%  -  passed arguments.
%
%  -  ending with a comment on style.  It is still possible to write
%     difficult to read programs!
